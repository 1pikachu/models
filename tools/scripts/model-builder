#!/usr/bin/env bash
#
# Copyright (c) 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

_usage()
{
  echo ''
  echo 'Usage: '
  echo ' '$(basename $0)' ['"$(echo ${_options[@]}|sed 's/ /|/g')"']' '<subcommand>' '[<model>...]'
  echo ''
  echo 'where a <subcommand> is one of:'
  echo ' '$(echo ${_commands[@]})
  echo ''
  echo 'and where a <model> is one of:'
  echo ' '"${_all_models[@]}"
  echo ''
  echo "Examples:"
  echo "# -- Initialize a new model specification --"
  echo 'model-builder init-spec <modelname-precision-mode>'
  echo ''
  echo "# -- List models in the default release groups --"
  echo 'model-builder models'
  echo ''
  echo "# -- Create two model packages --"
  echo 'model-builder package <modelname> <modelname>'
  echo ''
  echo "# -- Build a model's image with verbose enabled --"
  echo "# -- The --verbose option will show internal calls to docker run and additional debug output --"
  echo 'model-builder --verbose build -r <release group> <modelname>'
  echo ''
  echo "# -- View the internal call to docker run when generating a model's Dockerfile --"
  echo "# -- Adding --dry-run and --verbose will show the docker call but not execute it --"
  echo 'model-builder --dry-run --verbose generate-dockerfile <modelname>'
  echo ''
  echo "# -- Create a model's k8s package --"
  echo 'model-builder package-k8s <modelname>'
  echo ''
  echo "# -- Generate a model's Documentation --"
  echo 'model-builder generate-documentation <modelname>'
  echo ''
  echo "# -- Do {generate-documentation,package,package-k8s,generate-dockerfile,build} for several models--"
  echo 'model-builder make <modelname> <modelname>'
  exit 0
}

#
# Called at exit to clean up temp files and show source of error if one has occured
#
_model_builder_onexit()
{
  local _dir=$(_model_builder_root)/docker
  if [[ -f $_all_specs ]]; then
    echo ${_tmp_files[@]} | xargs rm -f
  fi
  if (( $# > 0 )) && [[ -n $1 ]] && (( $1 != 0 )); then
    # error handling goes here
    echo "Error $1 occurred on $2"
  fi
}

#
# Called by _model_builder_init_lists to create functions that hold memoized info from the specifications.
# Called within xargs to extract specification info in parallel.
#
_model_builder_generator ()
{
  local _release=$1
  eval $'__model_builder_'$_release$'_models() { echo $(cat '$_all_specs$' | sed -n \'/^[ \\t]*\'$_release\':/ {n;n;p;}\' | grep \'^.*- [\"\'\"\']\" | sed \'s/^.*- [\"\'\"\']\"\'.*{\\([[:alnum:]_-]*\\)}[\"\'\"\']\"\'$/\\1/g\' | sort | uniq); }'
  eval "_model_builder_"$_release"_models() { echo $(__model_builder_"$_release"_models); }"
  eval "type _model_builder_"$_release"_models" | sed '1d' > /tmp/'_model_builder_'$_release'_models'
}

_model_builder_set_current_models()
{
  for _i in "${_current_releases[@]}"; do
    _current_models+=( ${_all_models["$_i"]} )
  done
}

#
# Called at start to initialize global vars from the specifications
#
_model_builder_init_lists()
{
  local _asm_images _file _generator _i _ii _parallel _release=$1
  if (( ${#_all_releases[@]} == 0 )) && (( ${#_all_models[*]} == 0 )) && (( ${#_all_k8s[@]} == 0 )); then
    _all_specs=$(mktemp /tmp/$(basename $0)_specs.XXXXXXXXX)
    _tmp_files+=($_all_specs)
    cat $(find $(_model_builder_root)/docker/specs -name '*.yml') > $_all_specs

    eval $'__model_builder_releases_function() { [[ -d $(_model_builder_root)/docker/specs ]] && echo $(cat $_all_specs | sed -n \'/^releases:/,/^slice_sets:/p\'|egrep -v \'^releases:|^slice_sets:|^[ \\t]*tag_specs:|^[ \\t]*- \'| sed \'s/#.*$//\' | sed \'/^[ \\t]*$/d\'  | sed \'s/:$//\' | sed \'/^.*:.*$/d\'| sed -e \'s/^[[:space:]]*//\' | sort | uniq); }'
    eval "_model_builder_releases_function() { echo $(__model_builder_releases_function); }"
    _all_releases+=( $(_model_builder_releases_function) )
    _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})

    _generator=$(mktemp /tmp/model-builder-generator.XXXXXXXXX)
    _tmp_files+=($_generator)
    echo '#!/usr/bin/env bash' > $_generator
    echo '_all_specs='$_all_specs >> $_generator
    type _model_builder_generator | sed '1d' >> $_generator
    echo '_model_builder_generator $1' >> $_generator
    chmod +x $_generator
    _parallel=${#_all_releases[@]}
    echo ${_all_releases[@]} | xargs -n1 -P${#_all_releases[@]} $_generator
    for _i in "${_all_releases[@]}"; do
      _file='/tmp/_model_builder_'$_i'_models'
      eval "source $_file"
      _tmp_files+=($_file)
      _ii="$(eval $'\"_model_builder_'$_i$'_models\"')"
      _all_models["$_i"]=$_ii
    done
    _model_builder_set_current_models

    eval $'__model_builder_k8s_function() { [[ -d $(_model_builder_root)/docker/specs ]] && echo $(cat $_all_specs | grep \'<k8s package name>\' | sed \'s/^[ \\t]*<k8s package name>: //g\' | sed \'s/-k8s.tar.gz//g\' | sort | uniq); }'
    eval "_model_builder_k8s_function() { echo $(__model_builder_k8s_function); }"
    _all_k8s+=( $(_model_builder_k8s_function) )
  fi
}

#
# Outputs the root directory of the model-builder repo
#
_model_builder_root()
{
  echo $(dirname $(dirname $0))
}

#
# Outputs completion logic used for bash completion
#
_model_builder_completion()
{
  __model_builder_completion()
  {
    local _cur _prev _opts
    COMPREPLY=()
    _cur="${COMP_WORDS[COMP_CWORD]}"
    _prev="${COMP_WORDS[COMP_CWORD-1]}"
    _opts="$(_model_builder_options_function)"
    case "${_prev}" in
      -h|--help)
        local _base=${COMP_WORDS[COMP_CWORD-2]}
        case "${_base}" in
          *)
            return 0
            ;;
        esac
        ;;
      --verbose)
        local _options
        if [[ $_prev == --dry-run ]]; then
          _options="init-spec package generate-dockerfile generate-documentation build make options"
        else
          _options="--dry-run init-spec package generate-dockerfile generate-documentation build make options"
        fi
        COMPREPLY=($(compgen -W "${_options}" -- ${_cur}));
        return 0
        ;;
      --dry-run)
        local _options
        if [[ $_prev == --verbose ]]; then
          _options="init-spec package generate-dockerfile generate-documentation build make options"
        else
          _options="--verbose init-spec package generate-dockerfile generate-documentation build make options"
        fi
        COMPREPLY=($(compgen -W "${_options}" -- ${_cur}));
        return 0
        ;;
      init-spec|package|generate-dockerfile|generate-documentation|build|make)
        local _options="$(model-builder $_prev options)"
        COMPREPLY=( $(compgen -W "${_options}" -- ${_cur}) )
        return 0
        ;;
      *)
        if (( ${#COMP_WORDS[@]} > 2 )); then
          local _options=$(eval "${COMP_WORDS[@]:0:$((${#COMP_WORDS[@]}-1))} options")
          COMPREPLY=( $(compgen -W "${_options}" -- ${_cur}) )
          return 0
        fi
        ;;
    esac
    COMPREPLY=($(compgen -W "${_opts}" -- ${_cur}))  
    return 0
  }
  complete -F __model_builder_completion model-builder
}

_model_builder_new_spec()
{
  local _args=() _asm_new_spec new_model _model_dir _model_dir_mount
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'Creates a new specification based on the model arguments\n'
        return 0
        ;;
      --verbose)
        _args+=("$1")
        ;;
      --dry-run)
        _args+=("$1")
        ;;
      *)
        ;;
    esac
    shift
  done
  # Used for auto a new spec with the list of package files for the specified model

  # Check for the tf-tool container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker

  new_model=$1
  echo "Auto-generating a new spec file for: $new_model"

  _model_dir_mount='-v '$MODEL_DIR':/tf/models'
  _model_dir='--model_dir=models'

  _model_download=""
  if ! [[ -z $MODEL_URL ]]; then
    _model_download="--model_download=${MODEL_URL}"
  fi

  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null

  # Note: Run as user so that the spec file isn't owned by root
  _asm_new_spec="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) $_model_dir_mount -v $(pwd):/tf imz-tf-tools python3 assembler.py "

  _echo_command ${_asm_new_spec} \
      --arg http_proxy=${http_proxy} \
      --arg https_proxy=${https_proxy} \
      --generate_new_spec=${new_model} \
      $_model_download \
      $_model_dir \
      ${_args[@]}
  popd 1>/dev/null 2>/dev/null
}

_model_builder_get_images_from_log()
{
  # Checks the log file for the list of 'IMAGES_BUILT=' which should be
  # formatted as a comma separated list. Returns that comma separated value
  log_path=$1

  if [[ -f ${log_path} ]]; then
    # Find the last match for the list of images built in the output file
    images_built=$(grep '^IMAGES_BUILT=' ${log_path} | tail -1)
    # Strip off the "IMAGES_BUILT=" from that line to return
    echo $(echo $images_built | sed 's/^IMAGES_BUILT=//')
  else
    echo ""
  fi
}

_model_builder_build_images()
{
  local _abs_model_dir='' _args=() _asm_images _log_image_lists=() _model_dir='' _model_dir_mount='' _model_package_folder _output_dir='' _verbose='' _temp_model_package_dir _release_args=() _release_group
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'Builds the container images from release groups and model(s) provided as input\n'
        exit 0
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir") 
        ;;
      --output_dir=*)
        _output_dir=${1#*=}
        _output_dir=${_output_dir##*/}
        _args+=("$1") 
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1") 
        ;;
      -r|--release-group)
        ;;
      *)
        _args+=("$1") 
        ;;
    esac
    shift
  done

  # Define default values for the variables
  if [ -z "${MODEL_PACKAGE_DIR}" ]; then
    MODEL_PACKAGE_DIR=../output
  fi

  if [ -z "${MODEL_WORKSPACE}" ]; then
    MODEL_WORKSPACE=/workspace
  fi
  
  # Check for the tf-tool container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker
  
  # Verify that the model package directory exists
  if [ ! -d ${MODEL_PACKAGE_DIR} ]; then
    echo "The model package directory was not found at: ${MODEL_PACKAGE_DIR}"
    echo "Model packages must be built before building containers"
    exit 1
  fi 
  
  # Copy model package directory to this docker folder so that it's included in
  # the imz-tf-tools volume mount and it'll be in the same build context (directory)
  # that we are running from.
  _model_package_folder="model_packages"
  _temp_model_package_dir="$(pwd)/${_model_package_folder}/"
  rm -rf ${_temp_model_package_dir}
  mkdir -p ${_temp_model_package_dir}
  cp ${MODEL_PACKAGE_DIR}/*.tar.gz ${_temp_model_package_dir}

  _asm_images="docker run --rm $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount -v /var/run/docker.sock:/var/run/docker.sock imz-tf-tools python3 assembler.py "

  for _release_group in "${_current_releases[@]}"
  do
    temp_output_file=$(mktemp output.XXXXXXXXX)
    case "$_release_group" in
      versioned)
        _release_args=("--arg" "_TAG_PREFIX=${TAG_PREFIX}" "--arg" "TENSORFLOW_TAG=${TENSORFLOW_TAG}")
        ;;
      tf_1.15.2_containers)
        _release_args=("--arg" "_TAG_PREFIX=1.15.2" "--arg" "TENSORFLOW_TAG=1.15.2")
        ;;
      *)
        _release_args=()
        ;;
    esac
    _echo_command ${_asm_images} \
      --arg http_proxy=${http_proxy} \
      --arg https_proxy=${https_proxy} \
      --arg PACKAGE_DIR=${_model_package_folder} \
      --arg MODEL_WORKSPACE=${MODEL_WORKSPACE} \
      --repository ${LOCAL_REPO} \
      --release ${_release_group} \
      --build_images \
      ${_release_args[@]} \
      ${_args[@]} 2>&1 | tee $temp_output_file

    result=$?
    if (( $result != 0 )); then
      echo "Warning: A non-zero error code ($result) was returned when building the '$_release_group' images"
    fi
    _log_image_lists+=($(_model_builder_get_images_from_log $temp_output_file))
    rm $temp_output_file
  done

  echo "--------------------------------------"

  # Print out the images that were just built, and append to the IMAGE_LIST_FILE
  count=0
  for _log_image_list in "${_log_image_lists[@]}"
  do
    for i in $(echo ${_log_image_list} | sed "s/,/ /g")
    do
      echo $i
      count=$(($count+1))
      if [[ ! -z ${IMAGE_LIST_FILE} ]]; then
        echo $i >> ${IMAGE_LIST_FILE}
      fi
    done
  done

  if [[ ${count} == 0 ]]; then
    echo ""
    echo "No containers were built for release group(s): ${_current_releases[@]} "
    echo "Check the log output above for errors and ensure that you have the proper --release-group and build names specified."
  fi

  # Delete the temporary copy of the model package directory
  rm -rf ${_temp_model_package_dir}
  popd 1>/dev/null 2>/dev/null
}

_model_builder_build_packages()
{
  local _abs_model_dir='' _args=() _asm_dockerfiles _dry_run='' _model_dir='' _model_dir_mount='' _output_dir='' _verbose=''
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'Builds the model packages from release groups and model(s) provided as input\n'
        return 0
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir") 
        ;;
      --output_dir=*)
        _output_dir=${1#*=}
        _output_dir=${_output_dir##*/}
        _args+=("$1") 
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1") 
        ;;
      -r|--release-group)
        ;;
      *)
        _args+=("$1") 
        ;;
    esac
    shift
  done

  # Check for the imz-tf-tools container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker
  
  # Note: Run as user so that the dockerfiles have the right permissions
  _asm_dockerfiles="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount imz-tf-tools python3 assembler.py "
  
  # Call the assembler to build model packages
  _echo_command ${_asm_dockerfiles} --release dockerfiles --build_packages ${_args[@]}
  
  # List output packages
  echo "--------------------------------------"
  echo "Model Packages:"
  ls -1tl $_abs_model_dir/$_output_dir | grep -v k8s
  popd 1>/dev/null 2>/dev/null
}

_model_builder_build_k8s_packages()
{
  local _abs_model_dir='' _args=() _asm_dockerfiles _dry_run='' _model_dir='' _model_dir_mount='' _output_dir='' _verbose=''
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'Builds the k8 packages from release groups and model(s) provided as input\n'
        return 0
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir")
        ;;
      --output_dir=*)
        _output_dir=${1#*=}
        _output_dir=${_output_dir##*/}
        _args+=("$1")
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1")
        ;;
      -r|--release-group)
        ;;
      *)
        _args+=("$1")
        ;;
    esac
    shift
  done

  # Check for the imz-tf-tools container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker

  # Note: Run as user so that the dockerfiles have the right permissions
  _asm_dockerfiles="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount imz-tf-tools python3 assembler.py "

  # Call the assembler to build k8s packages
  _echo_command ${_asm_dockerfiles} --release dockerfiles --build_k8s_packages ${_args[@]}

  # List output packages
  echo "--------------------------------------"
  echo "K8S Packages:"
  ls -1tl $_abs_model_dir/$_output_dir | grep k8s
  popd 1>/dev/null 2>/dev/null
}

_model_builder_construct_dockerfiles()
{
  local _abs_model_dir _args=() _asm_dockerfiles _count _dry_run='' _model_dir='' _model_dir_mount='' _output_dir='' _verbose=''
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'Builds the dockerfiles from release groups and model(s) provided as input\n'
        return 0
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir") 
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1") 
        ;;
      -r|--release-group)
        ;;
      *)
        _args+=("$1") 
        ;;
    esac
    shift
  done
  
  # Check for the imz-tf-tools container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker
  
  # Note: Run as user so that the dockerfiles have the right permissions
  _asm_dockerfiles="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount imz-tf-tools python3 assembler.py "
  
  # Call the assembler to construct dockerfiles
  _echo_command ${_asm_dockerfiles} --release dockerfiles --construct_dockerfiles ${_args[@]}
  popd 1>/dev/null 2>/dev/null
  
  if ! [[ -d dockerfiles ]]; then
    echo $(pwd)/dockerfiles does not exist >&2
    exit 1
  fi
  # List dockerfiles
  _count=$(ls -1 dockerfiles | grep Dockerfile | wc -l | sed 's/^[ \t]*//;s/[ \t]*$//')
  if (( $_count > 0 )); then
    echo "--------------------------------------"
    echo "Category Dockerfiles:"
    ls -1l dockerfiles | grep Dockerfile
  fi
  if [[ -d dockerfiles/dataset_containers ]]; then
    echo "--------------------------------------"
    echo "Dataset Dockerfiles:"
    ls -1l dockerfiles/dataset_containers
  fi
  if [[ -d dockerfiles/model_containers ]]; then
    echo "--------------------------------------"
    echo "Model Dockerfiles:"
    ls -1tl dockerfiles/model_containers
  fi
  if [[ -d dockerfiles/ml ]]; then
    echo "--------------------------------------"
    echo "ML Dockerfiles:"
    ls -1tl dockerfiles/ml/scikit-learn
    ls -1tl dockerfiles/ml/XGBoost
  fi
}

_model_builder_generate_documentation()
{
  local _abs_model_dir _args=() _asm_dockerfiles _count _model_dir='' _model_dir_mount='' _output_dir='' _verbose=''
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'Builds a README.md file using the doc partials from release groups and model(s) provided as input\n'
        return 0
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir") 
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1") 
        ;;
      -r|--release-group)
        ;;
      *)
        _args+=("$1") 
        ;;
    esac
    shift
  done
  
  # Check for the imz-tf-tools container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker
  
  # Note: Run as user so that the dockerfiles have the right permissions
  _asm_dockerfiles="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount imz-tf-tools python3 assembler.py "
  
  # Call the assembler to generate documentation
  _echo_command ${_asm_dockerfiles} --release dockerfiles --generate_documentation ${_args[@]}
  popd 1>/dev/null 2>/dev/null
}

_model_builder_list_commands()
{
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'List all subcommands within model-builder\n'
        exit 0
        ;;
      *)
        ;;
    esac
    shift
  done
  echo ${_commands[@]}
}

_model_builder_list_images()
{
  local _abs_model_dir _args=() _asm_dockerfiles _model_dir='' _model_dir_mount='' _verbose='' _release_args=() _release_group
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'List the images that would be built for the passed in release(s) or the default releases ('"${DEFAULT_RELEASE_GROUPS[@]}"').\n'
        exit 0
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1")
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir") 
        ;;
      -r|--release-group)
        ;;
      *)
        _args+=("$1") 
        ;;
    esac
    shift
  done
  
  # Check for the imz-tf-tools container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker
  
  # Note: Run as user so that the dockerfiles have the right permissions
  _asm_dockerfiles="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount imz-tf-tools python3 assembler.py "
  
  if (( ${#_current_releases[@]} > 1 )); then
    echo ""
  fi

  # Call the assembler to list the images
  for _release_group in "${_current_releases[@]}"
  do
    if (( ${#_current_releases[@]} > 1 )); then
      echo "Release Group: ${_release_group}"
      echo "---------------------------------------"
    fi
    case "$_release_group" in 
      versioned)
        _release_args=("--arg" "_TAG_PREFIX=${TAG_PREFIX}" "--arg" "TENSORFLOW_TAG=${TENSORFLOW_TAG}")
        ;;
      tf_1.15.2_containers)
        _release_args=("--arg" "_TAG_PREFIX=1.15.2" "--arg" "TENSORFLOW_TAG=1.15.2")
        ;;
      *)
        _release_args=("--arg" "_TAG_PREFIX=${TAG_PREFIX}")
        ;;
    esac
    _echo_command ${_asm_dockerfiles} \
      --release ${_release_group} \
      --repository ${LOCAL_REPO} \
      --list_images \
      ${_release_args[@]} \
      ${_args[@]} 2>&1 | sort | column -c 2 -t
    if (( ${#_current_releases[@]} > 1 )); then
      echo ""
    fi
  done
  popd 1>/dev/null 2>/dev/null
}

_model_builder_list_k8s()
{
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'List all k8s models\n'
        exit 0
        ;;
      *)
        ;;
    esac
    shift
  done
  echo ${_all_k8s[@]}
}

_model_builder_list_models()
{
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'List all models within the specified release group(s) or all models in the default release groups: '${DEFAULT_RELEASE_GROUPS[@]}'\n'
        exit 0
        ;;
      *)
        ;;
    esac
    shift
  done
  echo ${_current_models[@]}
}

_model_builder_list_packages()
{
  local _abs_model_dir _args=() _asm_dockerfiles _model_dir='' _model_dir_mount='' _verbose=''
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'List the packages that would be built for the passed in release(s) or the default release (dockerfiles).\n'
        exit 0
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1")
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir") 
        ;;
      -r|--release-group)
        ;;
      *)
        _args+=("$1") 
        ;;
    esac
    shift
  done
  
  # Check for the imz-tf-tools container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker
  
  # Note: Run as user so that the dockerfiles have the right permissions
  _asm_dockerfiles="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount imz-tf-tools python3 assembler.py "

  if [[ ${#_current_releases[@]} == 0 ]]; then
    _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})
  fi

  if (( ${#_current_releases[@]} > 1 )); then
    echo ""
  fi

  # Call the assembler to list the packages
  for _release_group in "${_current_releases[@]}"
  do
    if (( ${#_current_releases[@]} > 1 )); then
      echo "Release Group: ${_release_group}"
      echo "---------------------------------------"
    fi
    case "$_release_group" in
      versioned)
        _release_args=("--arg" "_TAG_PREFIX=${TAG_PREFIX}" "--arg" "TENSORFLOW_TAG=${TENSORFLOW_TAG}")
        ;;
      tf_1.15.2_containers)
        _release_args=("--arg" "_TAG_PREFIX=1.15.2" "--arg" "TENSORFLOW_TAG=1.15.2")
        ;;
      *)
        _release_args=("--arg" "_TAG_PREFIX=${TAG_PREFIX}")
        ;;
    esac
    # Call the assembler to list packages
    _echo_command ${_asm_dockerfiles} \
      --release ${_release_group} \
      --repository ${LOCAL_REPO} \
      --list_packages \
      --arg _TAG_PREFIX=${TAG_PREFIX} \
      --arg TENSORFLOW_TAG=${TENSORFLOW_TAG} \
      ${_args[@]} 2>&1 | sort | column -c 2 -t
    if (( ${#_current_releases[@]} > 1 )); then
      echo ""
    fi
  done
  popd 1>/dev/null 2>/dev/null
}

_model_builder_list_packages_k8s()
{
  local _abs_model_dir _args=() _asm_dockerfiles _model_dir='' _model_dir_mount='' _verbose=''
  pushd $(_model_builder_root)/docker 1>/dev/null 2>/dev/null
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'List the k8 packages that would be built for the default release (dockerfiles).\n'
        exit 0
        ;;
      --verbose)
        _verbose=$1
        _args+=("$1")
        ;;
      --model_dir=*)
        _abs_model_dir=${1#*=}
        _model_dir_mount='-v '$_abs_model_dir':/tf/models'
        _model_dir='--model_dir=models'
        _args+=("$_model_dir")
        ;;
      *)
        _args+=("$1")
        ;;
    esac
    shift
  done

  # Check for the imz-tf-tools container and build it if it doesn't exist
  _check-for-imz-tf-tools $_quiet || _build-imz-tf-tools $(_model_builder_root)/docker

  # Note: Run as user so that the dockerfiles have the right permissions
  _asm_dockerfiles="docker run --rm -u $(id -u):$(id -g) $(_get-proxy-env-vars) -v $(pwd):/tf $_model_dir_mount imz-tf-tools python3 assembler.py "

  # Call the assembler to list k8s
  _echo_command ${_asm_dockerfiles} \
    --release dockerfiles \
    --repository ${LOCAL_REPO} \
    --list_k8s \
    --arg _TAG_PREFIX=${TAG_PREFIX} \
    --arg TENSORFLOW_TAG=${TENSORFLOW_TAG} \
    ${_args[@]} 2>&1 | sort | column -c 2 -t
  popd 1>/dev/null 2>/dev/null
}

_model_builder_list_releases()
{
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      -h|--help)
        echo -e 'List all releases within the specifications\n'
        exit 0
        ;;
      *)
        ;;
    esac
    shift
  done
  echo ${_all_releases[@]}
}

_model_builder_install_completion()
{
  if [[ -d /usr/local/etc/bash_completion.d ]]; then
    $0 completion > /usr/local/etc/bash_completion.d/$(basename $0)
  fi
}

_model_builder_make()
{
  # generate documentation
  _model_builder_generate_documentation $@
  if (( $? != 0 )); then
    echo "There was an error while generating documentation." >&2
    exit 1
  fi

  # build model packages
  _model_builder_build_packages $@
  if (( $? != 0 )); then
    echo "There was an error building model packages." >&2
    exit 1
  fi

  # build k8s packages
  _model_builder_build_k8s_packages $@
  if (( $? != 0 )); then
    echo "There was an error building k8s packages." >&2
    exit 1
  fi

  # construct dockerfiles
  _model_builder_construct_dockerfiles $@
  if (( $? != 0 )); then
    echo "There was an error while constructing dockerfiles." >&2
    exit 1
  fi

  # build images
  MODEL_PACKAGE_DIR=${MODEL_DIR}/output _model_builder_build_images $@
  if (( $? != 0 )); then
    echo "There was an error while building docker images." >&2
    exit 1
  fi
}

_model_builder_validate_args()
{
  local _arg
  for _arg in "$@"; do
    if [[ $_arg == options ]]; then
      echo '-h --help options '
      return 1
    fi
  done
  return 0
}

_model_builder_validate_models()
{
  local _arg _i _remaining_models=()
  _remaining_models+=( ${_current_models[@]} )

  for _arg in "$@"; do
    if [[ $_arg == -h ]] || [[ $_arg == --help ]]; then
      return 0
    elif [[ $_arg == options ]]; then
      echo '-h --help options '${_remaining_models[@]}
      return 1
    elif ! [[ "${_current_models[@]}" =~ $_arg ]]; then
      echo 'unknown option '$_arg >&2
      _usage
      exit 1
    elif ! [[ "${_selected_models[@]}" =~ $_arg ]]; then
      _selected_models+=( $_arg )
      _remaining_models=( ${_remaining_models[@]/$_arg/} )
    fi
  done

  if [[ ${#_selected_models[@]} == 0 ]]; then
    echo 'missing model name' >&2
    exit 1
  fi

  return 0
}

_model_builder_validate_release_groups()
{
  local _arg _args=($@) _first_release_group=true _end_of_index _index _remaining_releases=() _remaining_models=()
  _remaining_releases+=( ${_all_releases[@]} )
  _remaining_models+=( ${_current_models[@]} )

  for _index in "${!_args[@]}"; do
    _arg=${_args[$_index]}
    if [[ $_arg == -h ]] || [[ $_arg == --help ]]; then
      break
    fi
    if [[ $_arg == options ]]; then
      echo '-h --help -r --release-group options '
      return 1
    fi
    if [[ $_arg == --release-group ]] || [[ $_arg == -r ]]; then
      _end_of_index=$(( ${#_args[@]} - 2 ))
      if [[ $_first_release_group == true ]]; then
        _current_releases=()
        _current_models=()
        _remaining_models=()
        _first_release_group=false
      fi
      if [[ $_arg == ${@: -2:1} ]] && [[ options == ${@: -1:1} ]] && (( $_index == $_end_of_index )); then
        echo ${_remaining_releases[@]}
        return 1
      fi
      continue
    fi
    if ! [[ "${_all_releases[@]}" =~ $_arg ]]; then
      echo '_model_builder_validate_release_groups unknown option '$_arg >&2
      _usage
      exit 1
    fi
    if [[ "${_all_releases[@]}" =~ $_arg ]] && ! [[ "${_current_releases[@]}" =~ $_arg ]]; then
      _current_releases+=( $_arg )
      _remaining_releases=( ${_remaining_releases[@]/$_arg/} )
      for _i in "${_current_releases[@]}"; do
        _current_models+=( ${_all_models["$_i"]} )
      done
      _remaining_models+=( ${_current_models[@]} )
    fi
  done

  return 0
}

_model_builder_validate_release_groups_and_models()
{
  local _arg _args=($@) _first_release_group=true _i _index _remaining_releases=() _remaining_models=()
  _remaining_releases+=( ${_all_releases[@]} )
  _remaining_models+=( ${_current_models[@]} )

  for _index in "${!_args[@]}"; do
    _arg=${_args[$_index]}
    if [[ $_arg == -h ]] || [[ $_arg == --help ]]; then
      break
    elif [[ $_arg == options ]]; then
      echo '-h --help -r --release-group options '${_remaining_models[@]}
      return 1
    fi
    if [[ $_arg == --release-group ]] || [[ $_arg == -r ]]; then
      if [[ $_first_release_group == true ]]; then
        _current_releases=()
        _current_models=()
        _remaining_models=()
        _first_release_group=false
      fi
      if [[ $_arg == ${@: -2:1} ]] && (( $_index == ${#_args[@]} - 2 )); then
        echo ${_remaining_releases[@]}
        return 1
      fi
      continue
    fi
    if ! [[ "${_all_releases[@]}" =~ $_arg ]] && ! [[ "${_current_models[@]}" =~ $_arg ]]; then
      echo '_model_builder_validate_release_groups_and_models unknown option '$_arg >&2
      _usage
      exit 1
    fi
    if [[ "${_all_releases[@]}" =~ $_arg ]] && ! [[ "${_current_releases[@]}" =~ $_arg ]]; then
      _current_releases+=( $_arg )
      _remaining_releases=( ${_remaining_releases[@]/$_arg/} )
      for _i in "${_current_releases[@]}"; do
        _current_models+=( ${_all_models["$_i"]} )
      done
      _remaining_models+=( ${_current_models[@]} )
    fi
    if [[ "${_current_models[@]}" =~ $_arg ]] && ! [[ "${_selected_models[@]}" =~ $_arg ]]; then
      _selected_models+=( $_arg )
      _remaining_models=( ${_remaining_models[@]/$_arg/} )
    fi
  done
  return 0
}

_model_builder_validate_k8s()
{
  local _arg _remainingModels=()
  _remainingModels+=( ${_all_k8s[@]} )
  for _arg in "$@"; do
    if [[ $_arg == -h ]] || [[ $_arg == --help ]]; then
      break
    elif [[ $_arg == options ]]; then
      echo '-h --help options '${_remainingModels[@]}
      return 1
    elif ! [[ "${_all_k8s[@]}" =~ $_arg ]]; then
      echo 'unknown option '$_arg >&2
      _usage
      exit 1
    elif ! [[ "${_current_k8s[@]}" =~ $_arg ]]; then
      _current_k8s+=( $_arg )
    fi
    _remainingModels=( ${_remainingModels[@]/$_arg/} )
  done
  return 0
}

_model_builder_build_only_tags_matching_args()
{
  local _arg _models=()
  for _arg in "$@";do
    if [[ ${_current_models[@]} =~ $_arg ]]; then
      _models+=( ' --only_tags_matching=^.*'$_arg'$' )
    fi
  done
  echo ${_models[@]}
}

_model_builder_build_only_tags_matching_args_k8s()
{
  local _arg _models=()
  for _arg in "$@";do
    if [[ ${_all_k8s[@]} =~ $_arg ]]; then
      _models+=( ' --only_tags_matching=.*'$_arg'$' )
    fi
  done
  echo ${_models[@]}
}

_model_builder_export() 
{
  local _name=$1 _exportable=''
  declare -n _assoc=$2
  echo 'declare -A '$_name
  _exportable+=$_name'=('
  for _key in "${!_assoc[@]}"; do
    _exportable+=$'["'$_key$'"]="'${_assoc[$_key]}$'" '
  done
  _exportable+=')'
  echo "$_exportable"
}

_main()
{
  local _args=() _dry_run='' _model_dir='--model_dir='$MODEL_DIR _nocache='' _only_tags_matching='' _output_dir='--output_dir=models/output' _verbose='' _subcommand
  while [[ "$#" -gt "0" && $1 =~ ^- ]]; do
    case "$1" in
      --dry-run)
          _dry_run=$1
          shift
          ;;
      -h|--help)
          _usage
          exit 0
          ;;
      --verbose)
          _verbose=$1
          shift
          ;;
      --nocache)
          _nocache=$1
          shift
          ;;
      *)
          echo '_main unknown option '$1
          _args+=( $1 )
          shift
          exit 1
          ;;
    esac
  done

  case 1 in
    $(($#==0))) 
      _usage
      exit 0
      ;;
    $(($#==1)))
      case "$1" in 
        commands)
          _model_builder_list_commands $@
          ;;
        completion)
          eval $'__model_builder_options_function() { echo ${_options[@]}\' \'${_commands[@]}; }'
          eval "_model_builder_options_function() { echo $(__model_builder_options_function); }"
          type _model_builder_options_function | sed '1d'
          _model_builder_export '_all_models' _all_models
          echo $'_all_releases=('$(_model_builder_releases_function)$')'
          echo $'_current_releases=('${DEFAULT_RELEASE_GROUPS[@]}$')'
          echo $'_all_k8s+=('$(_model_builder_k8s_function)$')'
          type _model_builder_completion | sed '1,3d;$d' | sed '1s/    function //' | sed '2,$s/    //'
          ;;
        install-completion)
          _model_builder_install_completion
          ;;
        options)
          echo ${_options[@]}' '${_commands[@]}
          return 0
          ;;
        init-spec|package|package-k8s|generate-dockerfile|generate-documentation|build|make)
          echo 'missing model name'
          exit 1
          ;;
        images)
          _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})
          _model_builder_set_current_models
          _model_builder_list_images $_model_dir $_verbose
          return 0
          ;;
        models)
          _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})
          _model_builder_set_current_models
          _model_builder_list_models $@
          return 0
          ;;
        k8s)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_list_k8s $@
          return 0
          ;;
        packages)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_list_packages $_model_dir $_verbose
          return 0
          ;;
        packages-k8s)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_list_packages_k8s $_model_dir $_verbose
          return 0
          ;;
        releases)
          _model_builder_list_releases $@
          return 0
          ;;
        run-test-suite)
          $(_model_builder_root)/tests/model-builder-test-suite-generator && $(_model_builder_root)/tests/bin/bats $(_model_builder_root)/tests/model-builder.bats
          return $?
          ;;
        *)
          echo '_main unknown option '$1
          shift
          exit 1
          ;;
      esac
      ;;
    $(($#>=2)))
      _subcommand=$1
      shift
      case "$_subcommand" in
        commands)
          _model_builder_validate_args $@ || exit 0
          _model_builder_list_commands $@
          return 0
          ;;
        k8s)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_validate_args $@ || exit 0
          _model_builder_list_k8s $@
          return 0
          ;;
        init-spec)
          _model_builder_new_spec $_verbose $_dry_run $1
          ;;
        package)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_validate_models $@ || exit 0
          _only_tags_matching="$(_model_builder_build_only_tags_matching_args $@)"
          _model_builder_build_packages $_model_dir $_output_dir $_only_tags_matching $_verbose $_dry_run $@
          if (( $? != 0 )); then
            echo "There was an error building model packages."
            exit 1
          fi
          ;;
        package-k8s)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_validate_k8s $@ || exit 0
          _only_tags_matching="$(_model_builder_build_only_tags_matching_args_k8s $@)"
          _model_builder_build_k8s_packages $_model_dir $_output_dir $_only_tags_matching $_verbose $_dry_run $@
          if (( $? != 0 )); then
            echo "There was an error building k8s packages."
            exit 1
          fi
          ;;
        generate-dockerfile)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_validate_models $@ || exit 0
          _only_tags_matching="$(_model_builder_build_only_tags_matching_args $@)"
          _model_builder_construct_dockerfiles $_model_dir $_output_dir $_only_tags_matching $_verbose $_dry_run $@
          if (( $? != 0 )); then
            echo "There was an error while constructing dockerfiles." >&2
            exit 1
          fi
          ;;
        generate-documentation)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_validate_models $@ || exit 0
          _only_tags_matching="$(_model_builder_build_only_tags_matching_args $@)"
          _model_builder_generate_documentation $_model_dir $_output_dir $_only_tags_matching $_verbose $_dry_run $@
          if (( $? != 0 )); then
            echo "There was an error while constructing dockerfiles." >&2
            exit 1
          fi
          ;;
        images)
          _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})
          _model_builder_set_current_models
          _model_builder_validate_release_groups $@ || exit 0
          _model_builder_list_images $_model_dir $_verbose $_dry_run $@
          return 0
          ;;
        models)
          _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})
          _model_builder_set_current_models
          _model_builder_validate_release_groups $@ || exit 0
          _model_builder_list_models $@
          return 0
          ;;
        packages)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_validate_release_groups $@ || exit 0
          _model_builder_list_packages $_model_dir $_verbose $_dry_run $@
          return 0
          ;;
        packages-k8s)
          _current_releases=(dockerfiles)
          _model_builder_set_current_models
          _model_builder_validate_k8s $@ || exit 0
          _model_builder_list_packages_k8s $_model_dir $_verbose $@
          return 0
          ;;
        build)
          _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})
          _model_builder_set_current_models
          _model_builder_validate_release_groups_and_models $@ || exit 0
          _only_tags_matching="$(_model_builder_build_only_tags_matching_args $@)"
          MODEL_PACKAGE_DIR=${MODEL_DIR}/output _model_builder_build_images $_model_dir $_output_dir $_only_tags_matching $_verbose $_dry_run $_nocache $@
          if (( $? != 0 )); then
            echo "There was an error while building docker images." >&2
            exit 1
          fi
          ;;
        make)
          _current_releases=(${DEFAULT_RELEASE_GROUPS[@]})
          _model_builder_set_current_models
          _model_builder_validate_release_groups_and_models $@ || exit 0
          _only_tags_matching="$(_model_builder_build_only_tags_matching_args $@)"
          _model_builder_make $_model_dir $_output_dir $_only_tags_matching $_verbose $_dry_run $@
          ;;
        releases)
          _model_builder_validate_args $@ || exit 0
          _model_builder_list_releases $@
          return 0
          ;;
        *)
          echo 'unknown options '$1' '$@ >&2
          exit 1
          ;;
      esac
      ;;
  esac
}

trap '_model_builder_onexit $? $LINENO' EXIT
source $(_model_builder_root)/docker/tf_tools_utils.sh

MODEL_DIR=${MODEL_DIR-$PWD}

# Tag to use for the 'versioned' images
TENSORFLOW_TAG=${TENSORFLOW_TAG:=2.3.0-ubuntu-20.04}

# Local container repo used for building images
LOCAL_REPO=${LOCAL_REPO-model-zoo}

# If no release group arg is specified, use the TF release groups
DEFAULT_RELEASE_GROUPS=("versioned" "tf_1.15.2_containers")

TAG_PREFIX=${TENSORFLOW_TAG}
_options=("-h" "--help" "--verbose" "--dry-run")
_commands=("options" "build" "commands" "completion" "generate-dockerfile" "generate-documentation" "images" "init-spec" "install-completion" "k8s" "make" "models" "package" "package-k8s" "packages" "packages-k8s" "releases" "run-test-suite")
_tmp_files=()
_all_specs=''
_all_k8s=()
declare -A _all_models
_all_releases=()
_current_k8s=()
_current_models=()
_current_releases=()
_selected_models=()
_model_builder_init_lists
_main $@
