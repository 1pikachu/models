#!/usr/bin/env bash

MODELS=( $(model-builder models) )
MODELS=( ${MODELS[@]/all/} )
COUNT=$(( 0 ))

_model_builder_test_suite_generator_onexit()
{
  if (( $# > 0 )) && [[ -n $1 ]] && (( $1 != 0 )); then
    # error handling goes here
    echo "Error $1 occurred on $2"
  fi
  if [[ -f $_image_names ]]; then
    rm -f $_image_names
  fi
  if [[ -f $_package_names ]]; then
    rm -f $_package_names
  fi
}

trap '_model_builder_test_suite_generator_onexit $? $LINENO' EXIT

# remove old tests
case "$(uname -s)" in
  Linux)
    sed -i -e  '/^.*DO NOT EDIT BELOW THIS LINE.*$/,$d' $(dirname $0)/model-builder.bats
    ;;
  Darwin)
    sed -i "" -e  '/^.*DO NOT EDIT BELOW THIS LINE.*$/,$d' $(dirname $0)/model-builder.bats
    ;;
esac

echo '# DO NOT EDIT BELOW THIS LINE - generated by model-builder-test-suite-generator '$(date)  >> $(dirname $0)/model-builder.bats
echo '# *** tests for generate-documentation ***' >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo ''  >> $(dirname $0)/model-builder.bats
for model in "${MODELS[@]}"; do
  if [[ $model =~ ^.*(inference|training)$ ]]; then
    prefix=${model%-*-*}
    suffix=${model/${prefix}-/}
    prefix=${prefix//-/[_-]}
    precision=${suffix%-*}
    mode=${suffix#*-}
    readme=$(find quickstart -type d | grep $prefix'/' | grep $mode | grep $precision'$')/README.md

    echo $'@test "validate generate-documentation for '$model$' creates '$readme$'" {
      run model-builder -q generate-documentation '$model$'
      (( $status == 0 ))
      (( $(last_modified '$readme$') <= 50 ))
    }' >> $(dirname $0)/model-builder.bats
  fi
done

echo ''  >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo '# *** tests for generate-dockerfile ***' >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo ''  >> $(dirname $0)/model-builder.bats
for model in "${MODELS[@]}"; do
  dockerfile_path=$(find dockerfiles -name '*'$model'.Dockerfile')
  dockerfile=${dockerfile_path##*/}

  echo $'@test "validate generate-dockerfile for '$model$' creates '$dockerfile$'" {
    run model-builder -q generate-dockerfile '$model$'
    (( $status == 0 ))
    [[ "${lines[@]}" =~ '$dockerfile$' ]]
    (( $(last_modified '$dockerfile_path$') <= 50 ))
  }' >> $(dirname $0)/model-builder.bats
done

echo ''  >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo '# *** tests for package ***' >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo ''  >> $(dirname $0)/model-builder.bats
_package_names=$(mktemp /tmp/package_names.XXXXXXXXXX)
model-builder packages 2>&1 > $_package_names
for model in "${MODELS[@]}"; do
  package_path=$(cat $_package_names | grep '^.*'$model'.tar.gz$' | awk '{print $2}' || exit 0)
  if [[ -n $package_path ]]; then
    package=${package_path##*/}
    echo $'@test "validate package for '$model$' creates '$package$'" {
      run model-builder -q package '$model$'
      (( $status == 0 ))
      [[ "${lines[@]}" =~ '$package$' ]]
      (( $(last_modified '$package_path$') <= 50 ))
    }' >> $(dirname $0)/model-builder.bats
  fi
done

echo ''  >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo '# *** tests for k8s package ***' >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo ''  >> $(dirname $0)/model-builder.bats
_package_names=$(mktemp /tmp/package_names.XXXXXXXXXX)
model-builder packages-k8s 2>&1 > $_package_names
for model in "${MODELS[@]}"; do
  package_path=$(cat $_package_names | grep '^.*'$model'-k8s.tar.gz$' | awk '{print $2}' || exit 0)
  if [[ -n $package_path ]]; then
    package=${package_path##*/}
    echo $'@test "validate package-k8s for '$model$' creates '$package$'" {
      run model-builder -q package-k8s '$model$'
      (( $status == 0 ))
      [[ "${lines[@]}" =~ '$package$' ]]
      (( $(last_modified '$package_path$') <= 50 ))
    }' >> $(dirname $0)/model-builder.bats
  fi
done

echo ''  >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo '# *** tests for build ***' >> $(dirname $0)/model-builder.bats
echo '#' >> $(dirname $0)/model-builder.bats
echo ''  >> $(dirname $0)/model-builder.bats
_image_names=$(mktemp /tmp/image_names.XXXXXXXXXX)
model-builder images > $_image_names
for model in "${MODELS[@]}"; do
  image_name=$(cat $_image_names | grep '^.*'$model'$' | awk '{print $2}' || exit 0)
  if [[ -n $image_name ]]; then
    echo $'@test "validate build image for '$model$' creates '$image_name$'" {
      run model-builder -q --nocache build '$model$'
      (( $status == 0 ))
      [[ "${lines[@]}" =~ '$model$' ]]
    }' >> $(dirname $0)/model-builder.bats
  fi
done

